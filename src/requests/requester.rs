use crate::{
    payloads::{GetMe, SendMessage, *},
    requests::Request,
    types::{
        AllowedUpdate, BotCommand, ChatAction, ChatId, ChatPermissions, DiceEmoji,
        InlineQueryResult, InputFile, InputMedia, InputSticker, LabeledPrice, PassportElementError,
        PollType,
    },
};

/// The trait implemented by all bots & bot adaptors.
/// Essentially a request builder factory (?).
///
/// _This trait is included in the crate's [`prelude`](crate::prelude)_.
#[cfg_attr(all(docsrs, feature = "nightly"), doc(spotlight))]
pub trait Requester {
    type Err: std::error::Error + Send;

    // This block is auto generated by `cg` <https://github.com/teloxide/cg> (a8fa55a).
    // **DO NOT EDIT THIS BLOCK**,
    // edit `cg` instead.

    type GetUpdates: Request<Payload = GetUpdates, Err = Self::Err>;

    /// For telegram documentation see [`GetUpdates`]
    fn get_updates(&self) -> Self::GetUpdates;

    type SetWebhook: Request<Payload = SetWebhook, Err = Self::Err>;

    /// For telegram documentation see [`SetWebhook`]
    fn set_webhook<U, A>(&self, url: U, allowed_updates: A) -> Self::SetWebhook
    where
        U: Into<String>,
        A: IntoIterator<Item = AllowedUpdate>;

    type DeleteWebhook: Request<Payload = DeleteWebhook, Err = Self::Err>;

    /// For telegram documentation see [`DeleteWebhook`]
    fn delete_webhook(&self) -> Self::DeleteWebhook;

    type GetWebhookInfo: Request<Payload = GetWebhookInfo, Err = Self::Err>;

    /// For telegram documentation see [`GetWebhookInfo`]
    fn get_webhook_info(&self) -> Self::GetWebhookInfo;

    type GetMe: Request<Payload = GetMe, Err = Self::Err>;

    /// For telegram documentation see [`GetMe`]
    fn get_me(&self) -> Self::GetMe;

    type SendMessage: Request<Payload = SendMessage, Err = Self::Err>;

    /// For telegram documentation see [`SendMessage`]
    fn send_message<C, T>(&self, chat_id: C, text: T) -> Self::SendMessage
    where
        C: Into<ChatId>,
        T: Into<String>;

    type ForwardMessage: Request<Payload = ForwardMessage, Err = Self::Err>;

    /// For telegram documentation see [`ForwardMessage`]
    fn forward_message<C, F>(
        &self,
        chat_id: C,
        from_chat_id: F,
        message_id: i32,
    ) -> Self::ForwardMessage
    where
        C: Into<ChatId>,
        F: Into<ChatId>;

    type SendPhoto: Request<Payload = SendPhoto, Err = Self::Err>;

    /// For telegram documentation see [`SendPhoto`]
    fn send_photo<Ch, Ca>(&self, chat_id: Ch, photo: InputFile, caption: Ca) -> Self::SendPhoto
    where
        Ch: Into<ChatId>,
        Ca: Into<String>;

    type SendAudio: Request<Payload = SendAudio, Err = Self::Err>;

    /// For telegram documentation see [`SendAudio`]
    fn send_audio<Ch, Ca>(&self, chat_id: Ch, audio: InputFile, caption: Ca) -> Self::SendAudio
    where
        Ch: Into<ChatId>,
        Ca: Into<String>;

    type SendDocument: Request<Payload = SendDocument, Err = Self::Err>;

    /// For telegram documentation see [`SendDocument`]
    fn send_document<Ch, Ca>(
        &self,
        chat_id: Ch,
        document: InputFile,
        caption: Ca,
    ) -> Self::SendDocument
    where
        Ch: Into<ChatId>,
        Ca: Into<String>;

    type SendVideo: Request<Payload = SendVideo, Err = Self::Err>;

    /// For telegram documentation see [`SendVideo`]
    fn send_video<Ch, Ca>(&self, chat_id: Ch, video: InputFile, caption: Ca) -> Self::SendVideo
    where
        Ch: Into<ChatId>,
        Ca: Into<String>;

    type SendAnimation: Request<Payload = SendAnimation, Err = Self::Err>;

    /// For telegram documentation see [`SendAnimation`]
    fn send_animation<Ch, Ca>(
        &self,
        chat_id: Ch,
        animation: InputFile,
        caption: Ca,
    ) -> Self::SendAnimation
    where
        Ch: Into<ChatId>,
        Ca: Into<String>;

    type SendVoice: Request<Payload = SendVoice, Err = Self::Err>;

    /// For telegram documentation see [`SendVoice`]
    fn send_voice<Ch, Ca>(&self, chat_id: Ch, voice: InputFile, caption: Ca) -> Self::SendVoice
    where
        Ch: Into<ChatId>,
        Ca: Into<String>;

    type SendVideoNote: Request<Payload = SendVideoNote, Err = Self::Err>;

    /// For telegram documentation see [`SendVideoNote`]
    fn send_video_note<C>(&self, chat_id: C, video_note: InputFile) -> Self::SendVideoNote
    where
        C: Into<ChatId>;

    type SendMediaGroup: Request<Payload = SendMediaGroup, Err = Self::Err>;

    /// For telegram documentation see [`SendMediaGroup`]
    fn send_media_group<C, M>(&self, chat_id: C, media: M) -> Self::SendMediaGroup
    where
        C: Into<ChatId>,
        M: IntoIterator<Item = InputMedia>;

    type SendLocation: Request<Payload = SendLocation, Err = Self::Err>;

    /// For telegram documentation see [`SendLocation`]
    fn send_location<C>(
        &self,
        chat_id: C,
        latitude: f64,
        longitude: f64,
        live_period: u32,
    ) -> Self::SendLocation
    where
        C: Into<ChatId>;

    type EditMessageLiveLocation: Request<Payload = EditMessageLiveLocation, Err = Self::Err>;

    /// For telegram documentation see [`EditMessageLiveLocation`]
    fn edit_message_live_location<C>(
        &self,
        chat_id: C,
        message_id: i32,
        latitude: f64,
        longitude: f64,
    ) -> Self::EditMessageLiveLocation
    where
        C: Into<ChatId>;

    type EditMessageLiveLocationInline: Request<
        Payload = EditMessageLiveLocationInline,
        Err = Self::Err,
    >;

    /// For telegram documentation see [`EditMessageLiveLocationInline`]
    fn edit_message_live_location_inline<I>(
        &self,
        inline_message_id: I,
        latitude: f64,
        longitude: f64,
    ) -> Self::EditMessageLiveLocationInline
    where
        I: Into<String>;

    type StopMessageLiveLocation: Request<Payload = StopMessageLiveLocation, Err = Self::Err>;

    /// For telegram documentation see [`StopMessageLiveLocation`]
    fn stop_message_live_location<C>(
        &self,
        chat_id: C,
        message_id: i32,
        latitude: f64,
        longitude: f64,
    ) -> Self::StopMessageLiveLocation
    where
        C: Into<ChatId>;

    type StopMessageLiveLocationInline: Request<
        Payload = StopMessageLiveLocationInline,
        Err = Self::Err,
    >;

    /// For telegram documentation see [`StopMessageLiveLocationInline`]
    fn stop_message_live_location_inline<I>(
        &self,
        inline_message_id: I,
        latitude: f64,
        longitude: f64,
    ) -> Self::StopMessageLiveLocationInline
    where
        I: Into<String>;

    type SendVenue: Request<Payload = SendVenue, Err = Self::Err>;

    /// For telegram documentation see [`SendVenue`]
    fn send_venue<C, T, A>(
        &self,
        chat_id: C,
        latitude: f64,
        longitude: f64,
        title: T,
        address: A,
    ) -> Self::SendVenue
    where
        C: Into<ChatId>,
        T: Into<String>,
        A: Into<String>;

    type SendContact: Request<Payload = SendContact, Err = Self::Err>;

    /// For telegram documentation see [`SendContact`]
    fn send_contact<C>(&self, chat_id: C, phone_number: f64, first_name: f64) -> Self::SendContact
    where
        C: Into<ChatId>;

    type SendPoll: Request<Payload = SendPoll, Err = Self::Err>;

    /// For telegram documentation see [`SendPoll`]
    fn send_poll<C, Q, O>(
        &self,
        chat_id: C,
        question: Q,
        options: O,
        type_: PollType,
    ) -> Self::SendPoll
    where
        C: Into<ChatId>,
        Q: Into<String>,
        O: IntoIterator<Item = String>;

    type SendDice: Request<Payload = SendDice, Err = Self::Err>;

    /// For telegram documentation see [`SendDice`]
    fn send_dice<C>(&self, chat_id: C, emoji: DiceEmoji) -> Self::SendDice
    where
        C: Into<ChatId>;

    type SendChatAction: Request<Payload = SendChatAction, Err = Self::Err>;

    /// For telegram documentation see [`SendChatAction`]
    fn send_chat_action<C>(&self, chat_id: C, action: ChatAction) -> Self::SendChatAction
    where
        C: Into<ChatId>;

    type GetUserProfilePhotos: Request<Payload = GetUserProfilePhotos, Err = Self::Err>;

    /// For telegram documentation see [`GetUserProfilePhotos`]
    fn get_user_profile_photos(&self, user_id: i32) -> Self::GetUserProfilePhotos;

    type GetFile: Request<Payload = GetFile, Err = Self::Err>;

    /// For telegram documentation see [`GetFile`]
    fn get_file<F>(&self, file_id: F) -> Self::GetFile
    where
        F: Into<String>;

    type KickChatMember: Request<Payload = KickChatMember, Err = Self::Err>;

    /// For telegram documentation see [`KickChatMember`]
    fn kick_chat_member<C>(&self, chat_id: C, user_id: i32) -> Self::KickChatMember
    where
        C: Into<ChatId>;

    type UnbanChatMember: Request<Payload = UnbanChatMember, Err = Self::Err>;

    /// For telegram documentation see [`UnbanChatMember`]
    fn unban_chat_member<C>(&self, chat_id: C, user_id: i32) -> Self::UnbanChatMember
    where
        C: Into<ChatId>;

    type RestrictChatMember: Request<Payload = RestrictChatMember, Err = Self::Err>;

    /// For telegram documentation see [`RestrictChatMember`]
    fn restrict_chat_member<C>(
        &self,
        chat_id: C,
        user_id: i32,
        permissions: ChatPermissions,
    ) -> Self::RestrictChatMember
    where
        C: Into<ChatId>;

    type PromoteChatMember: Request<Payload = PromoteChatMember, Err = Self::Err>;

    /// For telegram documentation see [`PromoteChatMember`]
    fn promote_chat_member<C>(&self, chat_id: C, user_id: i32) -> Self::PromoteChatMember
    where
        C: Into<ChatId>;

    type SetChatAdministratorCustomTitle: Request<
        Payload = SetChatAdministratorCustomTitle,
        Err = Self::Err,
    >;

    /// For telegram documentation see [`SetChatAdministratorCustomTitle`]
    fn set_chat_administrator_custom_title<Ch, Cu>(
        &self,
        chat_id: Ch,
        user_id: i32,
        custom_title: Cu,
    ) -> Self::SetChatAdministratorCustomTitle
    where
        Ch: Into<ChatId>,
        Cu: Into<String>;

    type SetChatPermissions: Request<Payload = SetChatPermissions, Err = Self::Err>;

    /// For telegram documentation see [`SetChatPermissions`]
    fn set_chat_permissions<C>(
        &self,
        chat_id: C,
        permissions: ChatPermissions,
    ) -> Self::SetChatPermissions
    where
        C: Into<ChatId>;

    type ExportChatInviteLink: Request<Payload = ExportChatInviteLink, Err = Self::Err>;

    /// For telegram documentation see [`ExportChatInviteLink`]
    fn export_chat_invite_link<C>(&self, chat_id: C) -> Self::ExportChatInviteLink
    where
        C: Into<ChatId>;

    type SetChatPhoto: Request<Payload = SetChatPhoto, Err = Self::Err>;

    /// For telegram documentation see [`SetChatPhoto`]
    fn set_chat_photo<C>(&self, chat_id: C, photo: InputFile) -> Self::SetChatPhoto
    where
        C: Into<ChatId>;

    type DeleteChatPhoto: Request<Payload = DeleteChatPhoto, Err = Self::Err>;

    /// For telegram documentation see [`DeleteChatPhoto`]
    fn delete_chat_photo<C>(&self, chat_id: C) -> Self::DeleteChatPhoto
    where
        C: Into<ChatId>;

    type SetChatTitle: Request<Payload = SetChatTitle, Err = Self::Err>;

    /// For telegram documentation see [`SetChatTitle`]
    fn set_chat_title<C, T>(&self, chat_id: C, title: T) -> Self::SetChatTitle
    where
        C: Into<ChatId>,
        T: Into<String>;

    type SetChatDescription: Request<Payload = SetChatDescription, Err = Self::Err>;

    /// For telegram documentation see [`SetChatDescription`]
    fn set_chat_description<C>(&self, chat_id: C) -> Self::SetChatDescription
    where
        C: Into<ChatId>;

    type PinChatMessage: Request<Payload = PinChatMessage, Err = Self::Err>;

    /// For telegram documentation see [`PinChatMessage`]
    fn pin_chat_message<C>(&self, chat_id: C, message_id: i32) -> Self::PinChatMessage
    where
        C: Into<ChatId>;

    type UnpinChatMessage: Request<Payload = UnpinChatMessage, Err = Self::Err>;

    /// For telegram documentation see [`UnpinChatMessage`]
    fn unpin_chat_message<C>(&self, chat_id: C) -> Self::UnpinChatMessage
    where
        C: Into<ChatId>;

    type LeaveChat: Request<Payload = LeaveChat, Err = Self::Err>;

    /// For telegram documentation see [`LeaveChat`]
    fn leave_chat<C>(&self, chat_id: C) -> Self::LeaveChat
    where
        C: Into<ChatId>;

    type GetChat: Request<Payload = GetChat, Err = Self::Err>;

    /// For telegram documentation see [`GetChat`]
    fn get_chat<C>(&self, chat_id: C) -> Self::GetChat
    where
        C: Into<ChatId>;

    type GetChatAdministrators: Request<Payload = GetChatAdministrators, Err = Self::Err>;

    /// For telegram documentation see [`GetChatAdministrators`]
    fn get_chat_administrators<C>(&self, chat_id: C) -> Self::GetChatAdministrators
    where
        C: Into<ChatId>;

    type GetChatMembersCount: Request<Payload = GetChatMembersCount, Err = Self::Err>;

    /// For telegram documentation see [`GetChatMembersCount`]
    fn get_chat_members_count<C>(&self, chat_id: C) -> Self::GetChatMembersCount
    where
        C: Into<ChatId>;

    type GetChatMember: Request<Payload = GetChatMember, Err = Self::Err>;

    /// For telegram documentation see [`GetChatMember`]
    fn get_chat_member<C>(&self, chat_id: C, user_id: i32) -> Self::GetChatMember
    where
        C: Into<ChatId>;

    type SetChatStickerSet: Request<Payload = SetChatStickerSet, Err = Self::Err>;

    /// For telegram documentation see [`SetChatStickerSet`]
    fn set_chat_sticker_set<C, S>(
        &self,
        chat_id: C,
        sticker_set_name: S,
    ) -> Self::SetChatStickerSet
    where
        C: Into<ChatId>,
        S: Into<String>;

    type DeleteChatStickerSet: Request<Payload = DeleteChatStickerSet, Err = Self::Err>;

    /// For telegram documentation see [`DeleteChatStickerSet`]
    fn delete_chat_sticker_set<C>(&self, chat_id: C) -> Self::DeleteChatStickerSet
    where
        C: Into<ChatId>;

    type AnswerCallbackQuery: Request<Payload = AnswerCallbackQuery, Err = Self::Err>;

    /// For telegram documentation see [`AnswerCallbackQuery`]
    fn answer_callback_query<C>(&self, callback_query_id: C) -> Self::AnswerCallbackQuery
    where
        C: Into<String>;

    type SetMyCommands: Request<Payload = SetMyCommands, Err = Self::Err>;

    /// For telegram documentation see [`SetMyCommands`]
    fn set_my_commands<C>(&self, commands: C) -> Self::SetMyCommands
    where
        C: IntoIterator<Item = BotCommand>;

    type GetMyCommands: Request<Payload = GetMyCommands, Err = Self::Err>;

    /// For telegram documentation see [`GetMyCommands`]
    fn get_my_commands(&self) -> Self::GetMyCommands;

    type AnswerInlineQuery: Request<Payload = AnswerInlineQuery, Err = Self::Err>;

    /// For telegram documentation see [`AnswerInlineQuery`]
    fn answer_inline_query<I, R>(&self, inline_query_id: I, results: R) -> Self::AnswerInlineQuery
    where
        I: Into<String>,
        R: IntoIterator<Item = InlineQueryResult>;

    type EditMessageText: Request<Payload = EditMessageText, Err = Self::Err>;

    /// For telegram documentation see [`EditMessageText`]
    fn edit_message_text<C, T>(
        &self,
        chat_id: C,
        message_id: i32,
        text: T,
    ) -> Self::EditMessageText
    where
        C: Into<ChatId>,
        T: Into<String>;

    type EditMessageTextInline: Request<Payload = EditMessageTextInline, Err = Self::Err>;

    /// For telegram documentation see [`EditMessageTextInline`]
    fn edit_message_text_inline<I, T>(
        &self,
        inline_message_id: I,
        text: T,
    ) -> Self::EditMessageTextInline
    where
        I: Into<String>,
        T: Into<String>;

    type EditMessageCaption: Request<Payload = EditMessageCaption, Err = Self::Err>;

    /// For telegram documentation see [`EditMessageCaption`]
    fn edit_message_caption<Ch, Ca>(
        &self,
        chat_id: Ch,
        message_id: i32,
        caption: Ca,
    ) -> Self::EditMessageCaption
    where
        Ch: Into<ChatId>,
        Ca: Into<String>;

    type EditMessageCaptionInline: Request<Payload = EditMessageCaptionInline, Err = Self::Err>;

    /// For telegram documentation see [`EditMessageCaptionInline`]
    fn edit_message_caption_inline<I, C>(
        &self,
        inline_message_id: I,
        caption: C,
    ) -> Self::EditMessageCaptionInline
    where
        I: Into<String>,
        C: Into<String>;

    type EditMessageMedia: Request<Payload = EditMessageMedia, Err = Self::Err>;

    /// For telegram documentation see [`EditMessageMedia`]
    fn edit_message_media<C>(
        &self,
        chat_id: C,
        message_id: i32,
        media: InputMedia,
    ) -> Self::EditMessageMedia
    where
        C: Into<ChatId>;

    type EditMessageMediaInline: Request<Payload = EditMessageMediaInline, Err = Self::Err>;

    /// For telegram documentation see [`EditMessageMediaInline`]
    fn edit_message_media_inline<I>(
        &self,
        inline_message_id: I,
        media: InputMedia,
    ) -> Self::EditMessageMediaInline
    where
        I: Into<String>;

    type EditMessageReplyMarkup: Request<Payload = EditMessageReplyMarkup, Err = Self::Err>;

    /// For telegram documentation see [`EditMessageReplyMarkup`]
    fn edit_message_reply_markup<C>(
        &self,
        chat_id: C,
        message_id: i32,
    ) -> Self::EditMessageReplyMarkup
    where
        C: Into<ChatId>;

    type EditMessageReplyMarkupInline: Request<
        Payload = EditMessageReplyMarkupInline,
        Err = Self::Err,
    >;

    /// For telegram documentation see [`EditMessageReplyMarkupInline`]
    fn edit_message_reply_markup_inline<I>(
        &self,
        inline_message_id: I,
    ) -> Self::EditMessageReplyMarkupInline
    where
        I: Into<String>;

    type StopPoll: Request<Payload = StopPoll, Err = Self::Err>;

    /// For telegram documentation see [`StopPoll`]
    fn stop_poll<C>(&self, chat_id: C, message_id: i32) -> Self::StopPoll
    where
        C: Into<ChatId>;

    type DeleteMessage: Request<Payload = DeleteMessage, Err = Self::Err>;

    /// For telegram documentation see [`DeleteMessage`]
    fn delete_message<C>(&self, chat_id: C, message_id: i32) -> Self::DeleteMessage
    where
        C: Into<ChatId>;

    type SendSticker: Request<Payload = SendSticker, Err = Self::Err>;

    /// For telegram documentation see [`SendSticker`]
    fn send_sticker<C>(&self, chat_id: C, sticker: InputFile) -> Self::SendSticker
    where
        C: Into<ChatId>;

    type GetStickerSet: Request<Payload = GetStickerSet, Err = Self::Err>;

    /// For telegram documentation see [`GetStickerSet`]
    fn get_sticker_set<N>(&self, name: N) -> Self::GetStickerSet
    where
        N: Into<String>;

    type UploadStickerFile: Request<Payload = UploadStickerFile, Err = Self::Err>;

    /// For telegram documentation see [`UploadStickerFile`]
    fn upload_sticker_file(&self, user_id: i32, png_sticker: InputFile) -> Self::UploadStickerFile;

    type CreateNewStickerSet: Request<Payload = CreateNewStickerSet, Err = Self::Err>;

    /// For telegram documentation see [`CreateNewStickerSet`]
    fn create_new_sticker_set<N, T, E>(
        &self,
        user_id: i32,
        name: N,
        title: T,
        emojis: E,
    ) -> Self::CreateNewStickerSet
    where
        N: Into<String>,
        T: Into<String>,
        E: Into<String>;

    type AddStickerToSet: Request<Payload = AddStickerToSet, Err = Self::Err>;

    /// For telegram documentation see [`AddStickerToSet`]
    fn add_sticker_to_set<N, E>(
        &self,
        user_id: i32,
        name: N,
        sticker: InputSticker,
        emojis: E,
    ) -> Self::AddStickerToSet
    where
        N: Into<String>,
        E: Into<String>;

    type SetStickerPositionInSet: Request<Payload = SetStickerPositionInSet, Err = Self::Err>;

    /// For telegram documentation see [`SetStickerPositionInSet`]
    fn set_sticker_position_in_set<S>(
        &self,
        sticker: S,
        position: u32,
    ) -> Self::SetStickerPositionInSet
    where
        S: Into<String>;

    type DeleteStickerFromSet: Request<Payload = DeleteStickerFromSet, Err = Self::Err>;

    /// For telegram documentation see [`DeleteStickerFromSet`]
    fn delete_sticker_from_set<S>(&self, sticker: S) -> Self::DeleteStickerFromSet
    where
        S: Into<String>;

    type SetStickerSetThumb: Request<Payload = SetStickerSetThumb, Err = Self::Err>;

    /// For telegram documentation see [`SetStickerSetThumb`]
    fn set_sticker_set_thumb<N>(&self, name: N, user_id: i32) -> Self::SetStickerSetThumb
    where
        N: Into<String>;

    type SendInvoice: Request<Payload = SendInvoice, Err = Self::Err>;

    /// For telegram documentation see [`SendInvoice`]
    #[allow(clippy::too_many_arguments)]
    fn send_invoice<T, D, Pa, P, S, C, Pri>(
        &self,
        chat_id: i32,
        title: T,
        description: D,
        payload: Pa,
        provider_token: P,
        start_parameter: S,
        currency: C,
        prices: Pri,
    ) -> Self::SendInvoice
    where
        T: Into<String>,
        D: Into<String>,
        Pa: Into<String>,
        P: Into<String>,
        S: Into<String>,
        C: Into<String>,
        Pri: IntoIterator<Item = LabeledPrice>;

    type AnswerShippingQuery: Request<Payload = AnswerShippingQuery, Err = Self::Err>;

    /// For telegram documentation see [`AnswerShippingQuery`]
    fn answer_shipping_query<S>(&self, shipping_query_id: S, ok: bool) -> Self::AnswerShippingQuery
    where
        S: Into<String>;

    type AnswerPreCheckoutQuery: Request<Payload = AnswerPreCheckoutQuery, Err = Self::Err>;

    /// For telegram documentation see [`AnswerPreCheckoutQuery`]
    fn answer_pre_checkout_query<P>(
        &self,
        pre_checkout_query_id: P,
        ok: bool,
    ) -> Self::AnswerPreCheckoutQuery
    where
        P: Into<String>;

    type SetPassportDataErrors: Request<Payload = SetPassportDataErrors, Err = Self::Err>;

    /// For telegram documentation see [`SetPassportDataErrors`]
    fn set_passport_data_errors<E>(&self, user_id: i32, errors: E) -> Self::SetPassportDataErrors
    where
        E: IntoIterator<Item = PassportElementError>;
}
